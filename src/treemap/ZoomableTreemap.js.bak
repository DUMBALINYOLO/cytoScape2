import * as d3 from "d3";
import * as React from "react";
import { data } from "./sampleData";
import "./styles.scss";

export class ZoomableTreemap extends React.Component {
  margin = { top: 24, right: 0, bottom: 0, left: 0 };
  width = 1200; //640
  height = 530;
  formatNumber = d3.format(",d");
  x = d3.scaleLinear().domain([0, this.width]).range([0, this.width]);

  y = d3
    .scaleLinear()
    .domain([0, this.height - this.margin.top - this.margin.bottom])
    .range([0, this.height - this.margin.top - this.margin.bottom]);
  ref = React.createRef();

  componentDidMount() {
    this.renderD3();
  }

  componentDidUpdate() {
    this.renderD3();
  }

  //https://bl.ocks.org/JacquesJahnichen/42afd0cde7cbf72ecb81
  //https://bl.ocks.org/ganeshv/6a8e9ada3ab7f2d88022
  //https://gist.github.com/tkafka/6d00c44d5ae52182f548a18e8db44811

  transitioning;

  color = d3.scaleOrdinal().range(
    d3.schemeCategory10.map((c) => {
      c = d3.rgb(c);
      c.opacity = 0.6;
      return c;
    })
  );
  //var color = d3.scaleOrdinal(d3.schemeCategory20.map(fader));

  fader = (color) => {
    return d3.interpolateRgb(color, "#fff")(0.2);
  };
  format = d3.format(",d");
  treemap;
  svg;
  grandparent;

  renderD3() {
    this.updateDrillDown();
  }
  updateDrillDown() {
    if (this.svg) {
      this.svg.selectAll("*").remove();
    } else {
      //		 var treemap = d3.layout.treemap()
      //	      .children(function(d, depth) { return depth ? null : d._children; })
      //	      .sort(function(a, b) { return a.value - b.value; })
      //	      .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
      //	      .round(false);

      this.svg = d3
        .select("#domainDrillDown")
        .append("svg")
        .attr("width", this.width - this.margin.left - this.margin.right)
        .attr("height", this.height - this.margin.bottom - this.margin.top)
        .style("margin-left", -this.margin.left + "px")
        .style("margin.right", -this.margin.right + "px")
        .append("g")
        .attr(
          "transform",
          "translate(" + this.margin.left + "," + this.margin.top + ")"
        )
        .style("shape-rendering", "crispEdges");

      this.grandparent = this.svg.append("g").attr("class", "grandparent");

      this.grandparent
        .append("rect")
        .attr("y", -this.margin.top)
        .attr("width", this.width)
        .attr("height", this.margin.top);

      this.grandparent
        .append("text")
        .attr("x", 6)
        .attr("y", 6 - this.margin.top)
        .attr("dy", ".75em");

      this.treemap = d3
        .treemap()
        .tile(
          d3.treemapResquarify.ratio(
            (this.height / this.width) * 0.5 * (1 + Math.sqrt(5))
          )
        )
        .size([this.width, this.height])
        .round(false)
        .paddingInner(1);
    }

    var root = d3
      .hierarchy(data)
      .eachBefore((d) => {
        d.id = (d.parent ? d.parent.id + "." : "") + d.data.shortName;
      })
      .sum((d) => d.size)
      .sort((a, b) => {
        console.log("initial root sort a " + a.value + " b " + b.value);
        return b.height - a.height || b.value - a.value;
      });

    this.initialize(root);
    this.accumulate(root);
    this.layout(root);
    this.treemap(root);
    this.display(root);
  }

  initialize(root) {
    root.x = root.y = 0;
    root.x1 = this.width;
    root.y1 = this.height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  accumulate(d) {
    console.log("accumulate called " + d.data.name);
    //debugger;
    d._children = d.children;

    return d.children
      ? (d.value = d.children.reduce((p, v) => p + this.accumulate(v), 0))
      : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  layout(d) {
    if (d._children) {
      //    treemap.nodes({_children: d._children});
      //	  treemap(d);
      d._children.forEach((c) => {
        //c.x0 = d.x0 + c.x0 * (d.x1 - d.x0);
        //c.y0 = d.y0 + c.y0 * (d.y1 - d.y0);
        //c.x1 *= d.x1;
        //c.y1 *= d.y1;
        c.x0 = d.x0 + c.x0 * d.x1;
        c.y0 = d.y0 + c.y0 * d.y1;
        c.x1 *= d.x1 - d.x0;
        c.y1 *= d.y1 - d.y0;
        c.parent = d;
        this.layout(c);
      });
    }
  }

  display(d) {
    var self = this;
    var transition = function (event, d) {
      debugger;
      if (self.transitioning || !d) return;
      self.transitioning = true;
      var g2 = self.display(d),
        t1 = g1.transition().duration(750),
        t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      //x.domain([d.x0, d.x0 + d.x1]);
      //y.domain([d.y0, d.y0 + d.y1]);
      self.x.domain([d.x0, d.x0 + (d.x1 - d.x0)]);
      self.y.domain([d.y0, d.y0 + (d.y1 - d.y0)]);

      // Enable anti-aliasing during the transition.
      self.svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      self.svg.selectAll(".depth").sort((a, b) => {
        console.log(".depth sort a " + a.depth + " b " + b.depth);
        return a.depth - b.depth;
      });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll(".ptext")
        .call(self.text, self.x, self.y)
        .style("fill-opacity", 0);
      t2.selectAll(".ptext")
        .call(self.text, self.x, self.y)
        .style("fill-opacity", 1);
      t1.selectAll(".ctext")
        .call(self.text2, self.x, self.y)
        .style("fill-opacity", 0);
      t2.selectAll(".ctext")
        .call(self.text2, self.x, self.y)
        .style("fill-opacity", 1);
      t1.selectAll("rect").call(self.rect, self.x, self.y);
      t2.selectAll("rect").call(self.rect, self.x, self.y);

      // Remove the old node when the transition is finished.
      t1.remove().on("end", () => {
        self.svg.style("shape-rendering", "crispEdges");
        self.transitioning = false;
      });
    };
    this.grandparent
      .datum(d.parent)
      .on("click", transition)
      .select("text")
      .text(this.name(d));

    var g1 = this.svg
      .insert("g", ".grandparent")
      .datum(d)
      .attr("class", "depth");

    var g = g1.selectAll("g").data(d._children).enter().append("g");

    g.filter((d) => {
      return d._children;
    })
      .classed("children", true)
      .on("click", transition);

    var children = g
      .selectAll(".child")
      .data((d) => {
        return d._children || [d];
      })
      .enter()
      .append("g");

    children
      .append("rect")
      .attr("class", "child")
      .call(this.rect, this.x, this.y)
      .append("title")
      .text((d) => {
        return d.data.shortName + " (" + this.formatNumber(d.value) + ")";
      });

    children
      .append("text")
      .attr("class", "ctext")
      .text((d) => {
        return d.data.shortName;
      })
      .call(this.text2, this.x, this.y);

    g.append("rect").attr("class", "parent").call(this.rect, this.x, this.y);

    var t = g.append("text").attr("class", "ptext").attr("dy", ".75em");

    t.append("tspan").text((d) => {
      return d.data.shortName;
    });

    t.append("tspan")
      .attr("dy", "1.0em")
      .text((d) => {
        return this.formatNumber(d.value);
      });

    t.call(this.text, this.x, this.y);

    g.selectAll("rect").style("fill", (d) => {
      return this.color(d.data.shortName);
    });

    return g;
  }

  text(text, x, y) {
    text.selectAll("tspan").attr("x", (d) => {
      return x(d.x0) + 6;
    });
    text
      .attr("x", (d) => {
        return x(d.x0) + 6;
      })
      .attr("y", (d) => {
        return y(d.y0) + 3;
      })
      .style("opacity", (d) => {
        var w = x(d.x1) - x(d.x0);
        console.log(
          "text opacity setting textlength " +
            text.node().getComputedTextLength() +
            " d size " +
            w
        );
        return text.node().getComputedTextLength() < w - 6 ? 1 : 0;
      });
  }

  text2(text, x, y) {
    text
      .attr("x", (d) => {
        return x(d.x1) - text.node().getComputedTextLength() - 6;
      })
      .attr("y", (d) => {
        return y(d.y1) - 6;
      })
      .style("opacity", (d) => {
        var w = x(d.x1) - x(d.x0);
        console.log(
          "text2 opacity setting textlength " +
            text.node().getComputedTextLength() +
            " d size " +
            w
        );
        return text.node().getComputedTextLength() < w - 6 ? 1 : 0;
      });
  }

  rect(rect, x, y) {
    rect
      .attr("x", (d) => {
        return x(d.x0);
      })
      .attr("y", (d) => {
        return y(d.y0);
      })
      .attr("width", (d) => {
        var w = x(d.x1) - x(d.x0);
        console.log("id " + d.id + " rect width " + w);
        return w;
      })
      .attr("height", (d) => {
        var h = y(d.y1) - y(d.y0);
        console.log("id " + d.id + " rect height " + h);
        return h;
      });
  }

  name(d) {
    debugger;
    return d.parent
      ? this.name(d.parent) +
          " / " +
          d.data.shortName +
          " (" +
          this.formatNumber(d.value) +
          ")"
      : d.data.shortName + " (" + this.formatNumber(d.value) + ")";
  }

  render() {
    return <div id="domainDrillDown"></div>;
  }
}
